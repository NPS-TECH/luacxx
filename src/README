=head1 NAME

lua-cxx, luacxx - C++11 API for creating Lua bindings

=head1 SYNOPSIS

    // Create a new Lua environment to play with.
    auto env = lua::create();

    // Introduce a global into Lua
    env["foo"] = "No time";

    // Run some Lua code directly
    lua::run_string("assert(foo == 'No time')");

    // Retrieve a global
    auto value = env["foo"].get<std::string>();
    assert(value == "No time");

=head1 DESCRIPTION

Lua-cxx is a set of functions and objects designed to simplify the process of
constructing C++ and C modules for Lua. This library is designed to work in
tandem with Lua's existing C API, so it does not provide a complete facde. On
the contrary, I find Lua's C API to be amazingly well-designed, so I've tried
to ensure that Lua-cxx can be intermixed freely with Lua's C API. In fact, most
of the Lua C API has no analog in Lua-cxx - I just use the original, like in
the following example:

    // Add all arguments
    int add_several(lua::state* const state)
    {
        // Get each argument
        int sum = 0;
        for (int i = 1; i <= lua_gettop(state); ++i) {
            sum += lua::get<int>(state, i);
        }

        // Return the value
        lua::push(state, sum);
        lua_replace(state, 1);
        return 1;
    }

That being said, there are several places where Lua-cxx greatly simplify common
tasks. For instance, Lua has a number of lua_push* functions that can be
replaced with Lua-cxx's lua::push template and appropriate specializations. You
can extend this specialization with your own types, and Lua-cxx's other
features will immediately support them.

C++11 also adds support for variadic templates, which can be used to provide a
way to push a function of any arity into Lua without needing to write the
marshalling code yourself or running a preprocessor:

    // Standard C API is, of course, supported
    int create_foo(lua::state* const);
    lua::push(state, create_foo);

    // Fundamental types work, too
    int sum(int a, int b);
    lua::push(state, sum);

    // As are pointers to userdata and conversions to C++ strings.
    void changeTitle(QWindow* window, const std::string& title);
    lua::push(state, changeTitle);

    // Even lambdas work too, with a bit of help
    lua::push_function< int(int, int) >(state, [](int first, int second) {
        return first + second;
    });

Beyond this, Lua-cxx also has out-of-the-box support for Qt's QObject model, as
well as rudimentary support for Gtk's GObject model, so you can push these
types and their properties and methods will automatically be exposed to Lua.
You can then specialize further on a specific subtype to add behavior not
provided by that library's metadata.

=head1 INSTALLATION

Lua-cxx uses Automake as its build system, so the process is conventional:

    git clone https://github.com/dafrito/lua-cxx.git

    cd lua-cxx
    autoreconf -i
    ./configure
    make -j
    make install

=head1 STYLE

STL conventions are used for naming and case, though not slavishly, to
infer that a template-heavy C++ dialect is used. However, adherance to Lua's
conventions is preferred over that of C++. For instance, the lua::state is
passed as a pointer, even though it should rightfully be a reference.

=head1 THREAD-SAFETY

The thread-safety guarantees provided by Lua shall not be infringed due to the
use of Lua-cxx.

Lua-cxx does modify global state external to Lua itself such as to support
custom QVariant types. Thread-safety for these methods has not been determined.

=head1 SEE ALSO

Lua 5.2 - http://www.lua.org/manual/5.2/manual.html

=head1 COMMENTS AND BUG REPORTING

Email dafrito@gmail.com with all your reporting needs.

=head1 LICENSE

Copyright (c) 2013-2014 Aaron Faanes

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
